lons = c(-165.5, -145)
lats = c(51.5, 62)
View(WGOAMaster)
GOARegion_Map_New <- ggplot()+
# add 50m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-50),
linewidth=c(0.5),
colour="light grey")+
# add 100m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-100),
linewidth=c(0.5),
colour="darkgrey")+
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-200),
linewidth=c(0.5),
colour="black")+
# add coastline
geom_sf(data = world)+
coord_sf(xlim = lons, ylim = lats, expand = FALSE)+
#Plot WGOA points
geom_point(data = WGOAMaster, mapping = aes(LON, LAT), size = 1)
GOARegion_Map_New
View(WGOAMaster)
GOARegion_Map_New <- ggplot()+
# add 50m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-50),
linewidth=c(0.5),
colour="light grey")+
# add 100m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-100),
linewidth=c(0.5),
colour="darkgrey")+
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-200),
linewidth=c(0.5),
colour="black")+
# add coastline
geom_sf(data = world)+
coord_sf(xlim = lons, ylim = lats, expand = FALSE)+
#Plot WGOA points
geom_point(data = WGOAMaster, mapping = aes(LON, LAT), size = 1)+
geom_text(data = WGOAMaster, mapping = aes(LON, LAT, label = St_Ord ),
nudge_y = -0.05, size = 2.5)
GOARegion_Map_New
GOARegion_Map_New <- ggplot()+
# add 50m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-50),
linewidth=c(0.5),
colour="light grey")+
# add 100m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-100),
linewidth=c(0.5),
colour="darkgrey")+
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-200),
linewidth=c(0.5),
colour="black")+
# add coastline
geom_sf(data = world)+
coord_sf(xlim = lons, ylim = lats, expand = FALSE)+
#Plot WGOA points
geom_point(data = WGOAMaster, mapping = aes(LON, LAT), size = 1)+
geom_text(data = WGOAMaster, mapping = aes(LON, LAT, label = St_Ord ),
nudge_y = -0.05, size = 2.5)+
# formatting
scale_shape_discrete()+
theme_bw()+
xlab("Longitude")+
ylab("Latitude")+
theme(axis.text.x=element_text(size=10, color = "black"), axis.text.y = element_text(size=10, color = "black"))
GOARegion_Map_New
# get bathymetry data
b = getNOAA.bathy(lon1 = -165.5, lon2 = -144.5, lat1 = 51.5, lat2 = 62,
resolution = 15)
## Querying NOAA database ...
## This may take seconds to minutes, depending on grid size
## Building bathy matrix ...
# convert bathymetry to data frame
bf = fortify.bathy(b)
# get regional polygons
reg = map_data("world2Hires")
reg = subset(reg, region %in% c('USSR', 'USA'))
# convert lat longs
reg$long = (360 - reg$long)*-1
# set map limits, whole region
lons = c(-165.5, -144.5)
lats = c(51.5, 62)
######################################
# make plot
GOARegion_Map_New <- ggplot()+
# add 50m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-50),
linewidth=c(0.5),
colour="light grey")+
# add 100m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-100),
linewidth=c(0.5),
colour="darkgrey")+
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-200),
linewidth=c(0.5),
colour="black")+
# add coastline
geom_sf(data = world)+
coord_sf(xlim = lons, ylim = lats, expand = FALSE)+
#Plot WGOA points
geom_point(data = WGOAMaster, mapping = aes(LON, LAT), size = 1)+
geom_text(data = WGOAMaster, mapping = aes(LON, LAT, label = St_Ord ),
nudge_y = -0.05, size = 2.5)+
# formatting
scale_shape_discrete()+
theme_bw()+
xlab("Longitude")+
ylab("Latitude")+
theme(axis.text.x=element_text(size=10, color = "black"), axis.text.y = element_text(size=10, color = "black"))
GOARegion_Map_New
ggsave("GOA_IERP_AllSta_&_LINE8.png",path = here("Docs"), height = 8.5, width = 11, units = "in")
#Install Packages
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyr",  "dplyr","lubridate","hms", "ggplot2", "ggmap", "lattice", "stringr", "data.table",
"tibble","readxl", "sf","maps", "mapdata", "mapplots", "mapview", "marmap", "Cairo", "ncdf4",
"oce", "here","reshape2", "viridis", "export", "rnaturalearth", "kableExtra",
"rnaturalearthdata", "forcats","sf", "geosphere", "rgdal")
ipak(packages)
# Load Station Data Table from DY19-05
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv"))
### Create Station & Runtime Dataset ############
# Filter out Stations
# LLC = "late larval core" from polygon plot above
#LLCvec <- c(0,60:225,271)
Scen1<-c(0,24:28,44:38,53:59,60:179, 180, 181,201:197,208:213, 216,218,220,228:225,
234:238,239, 245:243,249:251,257:255,261:263, 269:267,271)
ScenName <- "CorePlusCoarseOutside"
Scenario<-Scen1
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"=1:length(Scenario))
# 1. Station Selection Through Scenario (above)
Sta <- WGOAdata %>% left_join(.,FinalSta) %>%
filter(Station %in% FinalSta$Station) %>%
arrange(Stn_Order)
# 2. Choose Departure Date
depart <- ymd_hm("2023-05-14 12:00")
# 3. Create data.frame that mirrors "Final Station Runtime"
SRTdata <- Sta %>% rename(LAT = Latitude.N., LON = Longitude..W.) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "NEU","")) %>%
mutate(Gear.Sampled =  replace(Gear.Sampled,Gear.Sampled == "NEU, CTD","CTD")) %>%
mutate(Bongo_hrs = ifelse(Station > 0, 0.33,0)) %>%
mutate(CTD_hrs = ifelse(Gear.Sampled == "CTD",0.5,0)) %>%
mutate(CalVET_hrs = ifelse(Gear.Sampled == "CALVET", 0.33,0)) %>%
mutate(CalCTD_hrs = ifelse(Gear.Sampled == "CALVET, CTD",0.83,0)) %>%
#<<<<<<< Updated upstream
mutate(Station_Time = lubridate::dhours(rowSums(across(c(Bongo_hrs,CTD_hrs,CalVET_hrs,CalCTD_hrs))))) %>% mutate(Ship_Speed = 11) %>% # Ship speed is Variable
mutate(lat_rad = LAT*pi/180) %>% mutate(long_rad = LON*pi/180) %>%
mutate(long_dif = long_rad - shift(long_rad)) %>%
#>>>>>>> Stashed changes
mutate(Dist_NM = ifelse(Station == 0,0,0) ) %>%
mutate(Dist_NM = distGeo(cbind(LON,LAT),cbind(shift(LON),shift(LAT)))/(1000*1.852)) %>% # distGEO does what code below does in base
#  mutate(Dist_NM = acos((sin(lag(lat_rad))*sin(lat_rad))+(cos(lag(lat_rad))*cos(lat_rad)*cos(long_dif)))/(pi/180)*60) %>%
mutate(Steam_T = Dist_NM/Ship_Speed) %>%
mutate(Steam_T = lubridate::dhours(Steam_T))
# 4. rearrange data to calculate time to travel to and complete station operations
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order)
shipslog <- na.omit(shipslog)
# 4. Create a table of Station Completion Times
ShipsLog <- shipslog %>% group_by(Stn_Order, Station, Grid.ID) %>%
reframe(Time_Dur = lubridate::dseconds(sum(Time_Dur)))  %>%
mutate(Sta_Time =  depart) %>% mutate(cTime_Dur = cumsum(Time_Dur)) %>%
mutate(Sta_Time = cTime_Dur + Sta_Time) %>% select(Station, Stn_Order, Grid.ID,Sta_Time)
# Output Station Table, include: Ships Log
kbl(ShipsLog, caption = "Next Stations", booktabs = T) %>%
kableExtra::kable_styling(latex_options = c("striped", "HOLD_position"))
#Install Packages
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyr",  "dplyr","lubridate","hms", "ggplot2", "ggmap", "lattice", "stringr", "data.table",
"tibble","readxl", "sf","maps", "mapdata", "mapplots", "mapview", "marmap", "Cairo", "ncdf4",
"oce", "here","reshape2", "viridis", "export", "rnaturalearth", "kableExtra",
"rnaturalearthdata", "forcats","sf", "geosphere", "rgdal")
ipak(packages)
# Load Station Data Table from DY19-05
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv"))
### Create Station & Runtime Dataset ############
# Filter out Stations
# LLC = "late larval core" from polygon plot above
#LLCvec <- c(0,60:225,271)
Scen1<-c(0,24:28,44:38,53:59,60:179, 180, 181,201:197,208:213, 216,218,220,228:225,
234:238,239, 245:243,249:251,257:255,261:263, 269:267,271)
ScenName <- "CorePlusCoarseOutside"
Scenario<-Scen1
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"=1:length(Scenario))
# 1. Station Selection Through Scenario (above)
Sta <- WGOAdata %>% left_join(.,FinalSta) %>%
filter(Station %in% FinalSta$Station) %>%
arrange(Stn_Order)
# 2. Choose Departure Date
depart <- ymd_hm("2023-05-14 12:00")
# 3. Create data.frame that mirrors "Final Station Runtime"
SRTdata <- Sta %>% rename(LAT = Latitude.N., LON = Longitude..W.) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "NEU","")) %>%
mutate(Gear.Sampled =  replace(Gear.Sampled,Gear.Sampled == "NEU, CTD","CTD")) %>%
mutate(Bongo_hrs = ifelse(Station > 0, 0.33,0)) %>%
mutate(CTD_hrs = ifelse(Gear.Sampled == "CTD",0.5,0)) %>%
mutate(CalVET_hrs = ifelse(Gear.Sampled == "CALVET", 0.33,0)) %>%
mutate(CalCTD_hrs = ifelse(Gear.Sampled == "CALVET, CTD",0.83,0)) %>%
#<<<<<<< Updated upstream
mutate(Station_Time = lubridate::dhours(rowSums(across(c(Bongo_hrs,CTD_hrs,CalVET_hrs,CalCTD_hrs))))) %>% mutate(Ship_Speed = 11) %>% # Ship speed is Variable
mutate(lat_rad = LAT*pi/180) %>% mutate(long_rad = LON*pi/180) %>%
mutate(long_dif = long_rad - shift(long_rad)) %>%
#>>>>>>> Stashed changes
mutate(Dist_NM = ifelse(Station == 0,0,0) ) %>%
mutate(Dist_NM = distGeo(cbind(LON,LAT),cbind(shift(LON),shift(LAT)))/(1000*1.852)) %>% # distGEO does what code below does in base
#  mutate(Dist_NM = acos((sin(lag(lat_rad))*sin(lat_rad))+(cos(lag(lat_rad))*cos(lat_rad)*cos(long_dif)))/(pi/180)*60) %>%
mutate(Steam_T = Dist_NM/Ship_Speed) %>%
mutate(Steam_T = lubridate::dhours(Steam_T))
# 4. rearrange data to calculate time to travel to and complete station operations
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order)
shipslog <- na.omit(shipslog)
# 4. Create a table of Station Completion Times
ShipsLog <- shipslog %>% group_by(Stn_Order, Station, Grid.ID) %>%
reframe(Time_Dur = lubridate::dseconds(sum(Time_Dur)))  %>%
mutate(Sta_Time =  depart) %>% mutate(cTime_Dur = cumsum(Time_Dur)) %>%
mutate(Sta_Time = cTime_Dur + Sta_Time) %>% select(Station, Stn_Order, Grid.ID,Sta_Time)
# Output Station Table, include: Ships Log
kbl(ShipsLog, caption = "Next Stations", booktabs = T) %>%
kableExtra::kable_styling(latex_options = c("striped", "HOLD_position"))
View(SRTdata)
View(WGOAMaster)
?rgdal::writeOGR()
install.packages("gissr")
devtools::install_github("skgrange/gissr")
?write_gpx
?gissr::write_gpx
remove.packages("gissr")
?sf
View(WGOAdata)
View(SRTdata)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
SRTdata$LON <- SRTdata$LON*-1
# get bathymetry data
b = getNOAA.bathy(lon1 = min(SRTdata$LON), lon2 = max(SRTdata$LON),
lat1 = min(SRTdata$LAT), lat2 = max(SRTdata$LAT),
resolution = 15)
#b = getNOAA.bathy(lon1 = -166, lon2 = -140, lat1 = 52, lat2 = 62,
#                  resolution = 15)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# get regional polygons
reg = map_data("world2Hires")
reg = subset(reg, region %in% c('USSR', 'USA'))
# convert lat longs
reg$long = (360 - reg$long)*-1
# set map limits, whole region
lons = c(min(SRTdata$LON), max(SRTdata$LON)) #-140 = large map
lats = c(min(SRTdata$LAT),max(SRTdata$LAT)) # 52 = large map
# 5. Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stns")) +
theme(axis.text.x=element_text(size=10, color = "black"), axis.text.y = element_text(size=10, color = "black"))
StaMapF
b = getNOAA.bathy(lon1 = min(SRTdata$LON)+-1, lon2 = max(SRTdata$LON)+1,
lat1 = min(SRTdata$LAT)+-1, lat2 = max(SRTdata$LAT)+1,
resolution = 15)
#b = getNOAA.bathy(lon1 = -166, lon2 = -140, lat1 = 52, lat2 = 62,
#                  resolution = 15)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# get regional polygons
#reg = map_data("world2Hires")
#reg = subset(reg, region %in% c('USSR', 'USA'))
# convert lat longs
#reg$long = (360 - reg$long)*-1
# set map limits, whole region
#lons = c(min(SRTdata$LON)+-1, max(SRTdata$LON)+1) #-140 = large map
#lats = c(min(SRTdata$LAT)+-1,max(SRTdata$LAT)+1) # 52 = large map
# 5. Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stns")) +
theme(axis.text.x=element_text(size=10, color = "black"), axis.text.y = element_text(size=10, color = "black"))
StaMapF
min(SRTdata$LON)
=min(SRTdata$LON)+-1
min(SRTdata$LON)+-1
lons = c(min(SRTdata$LON)+-1, max(SRTdata$LON)+1) #-140 = large map
lats = c(min(SRTdata$LAT)+-1,max(SRTdata$LAT)+1) # 52 = large map
# 5. Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stns")) +
theme(axis.text.x=element_text(size=10, color = "black"), axis.text.y = element_text(size=10, color = "black"))
StaMapF
View(FinalSta)
Scen3<-c(60:71)
#ScenName <- "CorePlusCoarseOutside"
LstSta <- length(Scenario)+1
ScenName <- "First Stations"
Scenario<-Scen3
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= LstSta:length(Scenario))
Scen1<-c(0,24:28,44:38,53:59,60:179, 180, 181,201:197,208:213, 216,218,220,228:225,
234:238,239, 245:243,249:251,257:255,261:263, 269:267,271)
Scen2<-c(24:28,44:38,53:59)
Scen3<-c(60:71)
Scen2<-c(24:28,44:38,53:59)
Scen3<-c(60:71)
length(sum(Scen2,Scen3))
length(Scen2,Scen3)
length(Scen2)
length(Scen2)+length(Scen3)
sum(length(Scen2,Scen3))
AllScenL <- c(24:28,44:38,53:59,60:71)
length(AllScenL)
Scen3<-c(60:71)
#ScenName <- "CorePlusCoarseOutside"
ScenName <- "First Stations"
Scenario<-Scen3
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= length(AllScenL):AllScenL+length(Scenario))
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= (length(AllScenL)):(AllScenL+length(Scenario)))
View(FinalSta)
AllScenL <- c(24:28,44:38,53:59) #Fill in with completed Scen stations
Scen2<-c(24:28,44:38,53:59)
Scen3<-c(60:71)
#ScenName <- "CorePlusCoarseOutside"
ScenName <- "First Stations"
Scenario<-Scen3 # Always Change to Updated Scen
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= (length(AllScenL)):(AllScenL+length(Scenario)))
View(FinalSta)
AllScenL <- length(c(24:28,44:38,53:59))
AllScenL <- length(c(24:28,44:38,53:59)) #Fill in with completed Scen stations
Scen2<-c(24:28,44:38,53:59)
Scen3<-c(60:71)
#ScenName <- "CorePlusCoarseOutside"
ScenName <- "First Stations"
Scenario<-Scen3 # Always Change to Updated Scen
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= (AllScenL+1):(AllScenL+length(Scenario)))
View(FinalSta)
lubridate::now()
lubridate::now(tzone = "America/Adak")
depart <- lubridate::ymd_hm(lubridate::now(tzone = "America/Adak"))
depart
depart <- lubridate::now(tzone = "America/Adak")
length(Scen2)
View(FinalSta)
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stations")) +
theme(axis.text.x=element_text(size=8, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stations")) +
theme(axis.text.x=element_text(size=8, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stations")) +
theme(axis.text.x=element_text(size=8,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stations")) +
theme(axis.text.x=element_text(size=8,hjust = 1,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
SRTdata$LON <- SRTdata$LON*-1
# get bathymetry data
b = getNOAA.bathy(lon1 = min(SRTdata$LON)+-1, lon2 = max(SRTdata$LON)+1,
lat1 = min(SRTdata$LAT)+-1, lat2 = max(SRTdata$LAT)+1,
resolution = 15)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# set map limits, whole region
lons = c(min(SRTdata$LON)+-1, max(SRTdata$LON)+1) #-140 = large map
lats = c(min(SRTdata$LAT)+-1,max(SRTdata$LAT)+1) # 52 = large map
# 5. Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stations")) +
theme(axis.text.x=element_text(size=8,hjust = 1,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
select(Stn_Order,Grid.ID,Sta_Time) %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order) %>%
rename("Station" = "Stn_Order", "Grid ID" = "Grid.ID","Station Time" = "Sta_Time")
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
select(Stn_Order,Grid.ID,Station_Time) %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order) %>%
rename("Station" = "Stn_Order", "Grid ID" = "Grid.ID","Station Time" = "Sta_Time")
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_")
View(shipslog)
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order) %>%
rename("Station" = "Stn_Order", "Grid ID" = "Grid.ID","Station Time" = "Sta_Time")
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order) %>%
rename("Station" = "Stn_Order", "Grid ID" = "Grid.ID")
ShipsLog <- shipslog %>% group_by(Stn_Order, Station, Grid.ID) %>%
reframe(Time_Dur = lubridate::dseconds(sum(Time_Dur)))  %>%
mutate(Sta_Time =  depart) %>% mutate(cTime_Dur = cumsum(Time_Dur)) %>%
mutate(Sta_Time = cTime_Dur + Sta_Time) %>% select(Stn_Order, Grid.ID,Sta_Time) %>%
rename("Station"="Stn_Order","Grid Station"="Grid.ID","Station Time"="Sta_Time")
View(ShipsLog)
