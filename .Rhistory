stpliteCol <- c("blue","orange","red")
# Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = WGOA_StaTable, mapping = aes(LON, LAT, shape = Gear.Sampled, color= Sta_Pri), size = 2)+
#geom_path(data = WGOA_StaTable, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = WGOA_StaTable, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+
scale_color_manual(values = stpliteCol)+
ggtitle(paste(ScenName)) +
theme(axis.text.x=element_text(size=8,hjust = 1,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
ggsave(paste0(ScenName,".png"),path = here("Docs"), height = 8.5, width = 11, units = "in")
#Install Packages
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyr",  "dplyr","lubridate","hms", "ggplot2", "ggmap", "lattice", "stringr", "data.table",
"tibble","readxl", "sf","maps", "mapdata", "mapplots", "mapview", "marmap", "Cairo", "ncdf4",
"oce", "here","reshape2", "viridis", "export", "rnaturalearth",
"rnaturalearthdata", "forcats","sf", "geosphere")
ipak(packages)
# Load Data: Using DY19-05 stations locations from that survey's Project Instructions
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv"))
# If using "WGOA station_list_dougherty_2019_ProjInstrutions.csv" as WGOAdata, run the following
# changing "Gear.Sampled" to reflect no neustons and Bongos at every station
WGOAdata <- WGOAdata %>% rename("LAT" = "Latitude.N.") %>% rename("LON"="Longitude..W.") %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "","BONGO")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "NEU","BONGO")) %>%
mutate(Gear.Sampled =  replace(Gear.Sampled,Gear.Sampled == "NEU, CTD","BONGO,CTD")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CTD","BONGO,CTD")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CALVET","BONGO,CALVET")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CALVET, CTD","BONGO,CALVET,CTD"))
WGOAdata$LON <- WGOAdata$LON*-1
# Create Base Layer Maps will all numbered stations labeled, with a more focused region (not whole WGOA)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
View(WGOAdata)
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv"))
# If using "WGOA station_list_dougherty_2019_ProjInstrutions.csv" as WGOAdata, run the following
# changing "Gear.Sampled" to reflect no neustons and Bongos at every station
WGOAdata <- WGOAdata %>% rename("LAT" = "Latitude.N.") %>% rename("LON"="Longitude..W.") %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "","BONGO")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "NEU","BONGO")) %>%
mutate(Gear.Sampled =  replace(Gear.Sampled,Gear.Sampled == "NEU, CTD","BONGO,CTD")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CTD","BONGO,CTD")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CALVET","BONGO,CALVET")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CALVET, CTD","BONGO,CALVET,CTD"))
WGOAdata$LON <- WGOAdata$LON*-1
View(WGOAdata)
A <- c(0,24:28, 53:59, 77:84,93:100,108:113,120:125,132:141,148:152,160:165,
167,169,171,173,175,177,208:213,225:228,220,218,216,234:238,271)
B <- c(1:9, 38:44,68:76,85:92,101:107,114:119,126:131,142:147,153:159,166,168,170,
172,174,176,178,179,180)
Port <-c(0)
# C = anything not A & B, see line 121 below
#moved rom B to C <- c(181, 201:197, 224:221,219,217,215,214,229:233,239,243:245,
#       249:251,255:257,261:263,267:269)
WGOA_StaTable <- SRTdata %>% select(Station, Grid.ID,LAT,LON,Gear.Sampled) %>%
mutate(Gear.Sampled = ifelse(Station == 24,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station == 40,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station == 94,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station %in% Port,"",Gear.Sampled)) %>%
mutate(Sta_Pri = if_else(Station %in% A,"A",if_else(Station %in% B,"B","C")))
## Remove C priority Stations; filter dropped stations from Outlook
# Outlook Stations left, in order
StaTDL<-c(1:9,24:28,59:53,84:77, 92:85, 100:93, 107:101,113:108,119:114,
125:120,131:126,136:132,141:137,142:147,152:148, 156:153, 159:157,165:160,
166:179,180,213:208,216,218,220,228:225,234:238,271)
WGOA_StaTable <- WGOA_StaTable %>% filter(Sta_Pri != "C") %>%
filter(Station %in% StaTDL)
View(WGOA_StaTable)
View(WGOAdata)
A <- c(0,24:28, 53:59, 77:84,93:100,108:113,120:125,132:141,148:152,160:165,
167,169,171,173,175,177,208:213,225:228,220,218,216,234:238,271)
B <- c(1:9, 38:44,68:76,85:92,101:107,114:119,126:131,142:147,153:159,166,168,170,
172,174,176,178,179,180)
Port <-c(0)
# C = anything not A & B, see line 121 below
#moved rom B to C <- c(181, 201:197, 224:221,219,217,215,214,229:233,239,243:245,
#       249:251,255:257,261:263,267:269)
WGOA_StaTable <- WGOAdata %>% select(Station, Grid.ID,LAT,LON,Gear.Sampled) %>%
mutate(Gear.Sampled = ifelse(Station == 24,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station == 40,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station == 94,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station %in% Port,"",Gear.Sampled)) %>%
mutate(Sta_Pri = if_else(Station %in% A,"A",if_else(Station %in% B,"B","C")))
## Remove C priority Stations; filter dropped stations from Outlook
# Outlook Stations left, in order
StaTDL<-c(1:9,24:28,59:53,84:77, 92:85, 100:93, 107:101,113:108,119:114,
125:120,131:126,136:132,141:137,142:147,152:148, 156:153, 159:157,165:160,
166:179,180,213:208,216,218,220,228:225,234:238,271)
WGOA_StaTable <- WGOA_StaTable %>% filter(Sta_Pri != "C") %>%
filter(Station %in% StaTDL)
View(WGOA_StaTable)
ScenName <- "DY23-07 All A & B Priority Stations"
write.csv(WGOA_StaTable, here("Data","DY23-07_A&B_priority.csv"))
# Load Station Data Table from DY19-05
#WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv"))
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
GS.2 <- read.csv(here("Data","DY23-07_A&B_priority_Gear.Sampled2_Vector.csv"))
WGOAdata <- WGOAdata %>% left_join(.,GS.2)
# Filter our "B" priority stations
#WGOAdata <- WGOAdata %>% filter(Sta_Pri=="A")
### Create Station & Runtime Dataset ############
#All Stations
AllSta<- c(0, 1:9,28:24,38:44,59:53,68:179,180,213:208,216:220,228:225,234:238,271)
# Log of Removed Stations before Survey
# (5/11/23): B 38:44,68:76
#Stations Left to Sample
# Completed Stations
CompleteScenL <- length(c(1:6)) #Fill in with completed StaTDL stations
# Staions Remaining
StaTDL<-c(7:9,24:28,59:53,84:77,92:85,100:93,107:101,113:108,119:114,
125:120,131:126,136:132,141:137,147:142,152:148, 156:153, 159:157,165:160,
166:179,180,213:208,216,218,220,228:225,234:238,271)
# Reverse Order Stations for Reference (DO NOT DELETE)
#
#            c(1:9,24:28,59:53,84:77, 92:85, 100:93, 107:101,113:108,119:114,
#           125:120, 131:126, 136:132,141:137, 142:142,152:148, 156:153, 159:157,165:160,
#           166:179,180,213:208,216:220,228:225,234:238,271)
ScenName <- "Stations Remaining"
Scenario<-StaTDL # Always Change to Updated Stations Remaining
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= (CompleteScenL+1):(CompleteScenL+length(Scenario)))
# 1. Station Selection Through Scenario (above)
Sta <- WGOAdata %>% left_join(.,FinalSta) %>%
filter(Station %in% FinalSta$Station) %>%
arrange(Stn_Order)
# 2. Choose Departure Date
DH_SIP <- ymd_hm("2023-05-15 12:00")
#depart <- DH_SIP + dhours(9) # pre-survey calculations, takes ~8 hours to get to STA 1 from DH
depart <- lubridate::now(tzone = "America/Adak") # Alaska time, for at sea calculations
# 3. Create data.frame that mirrors "Final Station Runtime.xlsx"
# If using smalled CalVET grid, use "Gear.Sampled2".  Also, change Gear.Sampled on lines 86-89 & 119-120
SRTdata <- Sta %>%
#mutate(Bongo_hrs = ifelse(Gear.Sampled == "BONGO", 0.33,0)) %>% # BONGO at all stations
#mutate(BON_CTD_hrs = ifelse(Gear.Sampled == "BONGO,CTD",0.83,0)) %>%
#mutate(BON_CalVET_hrs = ifelse(Gear.Sampled == "BONGO,CALVET", 0.66,0)) %>%
#mutate(BON_Cal_CTD_hrs = ifelse(Gear.Sampled == "BONGO,CALVET,CTD",1.16,0)) %>%
mutate(Bongo_hrs = ifelse(Gear.Sampled2 == "BONGO", 0.33,0)) %>% # BONGO at all stations
mutate(BON_CTD_hrs = ifelse(Gear.Sampled2 == "BONGO,CTD",0.83,0)) %>%
mutate(BON_CalVET_hrs = ifelse(Gear.Sampled2 == "BONGO,CALVET", 0.66,0)) %>%
mutate(BON_Cal_CTD_hrs = ifelse(Gear.Sampled2 == "BONGO,CALVET,CTD",1.16,0)) %>%
#<<<<<<< Updated upstream
mutate(Station_Time = lubridate::dhours(rowSums(across(c(Bongo_hrs,BON_CTD_hrs,BON_CalVET_hrs,BON_Cal_CTD_hrs))))) %>%
mutate(Ship_Speed = 11) %>%  # Ship speed is Variable
mutate(lat_rad = LAT*pi/180) %>% mutate(long_rad = LON*pi/180) %>%
mutate(long_dif = long_rad - shift(long_rad)) %>%
#>>>>>>> Stashed changes
mutate(Dist_NM = ifelse(Station == 0,0,0) ) %>%
mutate(Dist_NM = distGeo(cbind(LON,LAT),cbind(shift(LON),shift(LAT)))/(1000*1.852)) %>% # distGEO does what code below does in base r
#  mutate(Dist_NM = acos((sin(lag(lat_rad))*sin(lat_rad))+(cos(lag(lat_rad))*cos(lat_rad)*cos(long_dif)))/(pi/180)*60) %>%
mutate(Steam_T = Dist_NM/Ship_Speed) %>%
mutate(Steam_T = lubridate::dhours(Steam_T))
# Write .csv of new Station Order for Ships gpx info
ODsta <- SRTdata %>% select(Grid.ID,LAT,LON,Gear.Sampled2,Stn_Order)
write.csv(ODsta, here("Data","For Dyson","DY23-07 Survey Station Order.csv"), row.names = FALSE) #Error if file open
# 4. rearrange data to calculate time to travel to and complete station operations
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order)
shipslog <- na.omit(shipslog)
# 5. Create a table of Station Completion Times
ShipsLog <- shipslog %>% group_by(Stn_Order, Station, Grid.ID) %>%
reframe(Time_Dur = lubridate::dseconds(sum(Time_Dur)))  %>%
mutate(Sta_Time =  depart) %>% mutate(cTime_Dur = cumsum(Time_Dur)) %>%
mutate(Sta_Time = cTime_Dur + Sta_Time) %>% select(Stn_Order, Grid.ID,Sta_Time) %>%
rename("Station"="Stn_Order","Grid Station"="Grid.ID","Est.Station Time"="Sta_Time")
#6. Create a table to link Gear.Sampled for daily stations in ShipsLog to know Operations at each station
Sta_GearSamp <- SRTdata %>% select(Station,Grid.ID,LAT,LON,Gear.Sampled) %>%
filter(Station %in% FinalSta$Station) %>% select(Grid.ID,LAT,LON,Gear.Sampled) %>%
rename("Grid Station"="Grid.ID")
ShipsLog <- left_join(ShipsLog,Sta_GearSamp, by = "Grid Station") %>%
select(Station,`Grid Station`,LAT,LON,Gear.Sampled,`Est.Station Time`)
# Output Station Table, include: Ships Log
kbl(ShipsLog, caption = "Next Stations", booktabs = T) %>%
kableExtra::kable_styling(bootstrap_options = "bordered", latex_options = c("striped", "HOLD_position"))
#SRTdata$LON <- SRTdata$LON*-1
# get bathymetry data
b = getNOAA.bathy(lon1 = min(SRTdata$LON)+-1, lon2 = max(SRTdata$LON)+1,
lat1 = min(SRTdata$LAT)+-1, lat2 = max(SRTdata$LAT)+1,
resolution = 15)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# set map limits, whole region
lons = c(min(SRTdata$LON)+-1, max(SRTdata$LON)+1) #-140 = large map
lats = c(min(SRTdata$LAT)+-1,max(SRTdata$LAT)+1) # 52 = large map
# 5. Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = SRTdata, mapping = aes(LON, LAT, shape = Gear.Sampled), size = 1)+
geom_path(data = SRTdata, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = SRTdata, mapping = aes(LON, LAT, label = Stn_Order ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+ ggtitle(paste(ScenName,length(Scenario),"Stations")) +
theme(axis.text.x=element_text(size=8,hjust = 1,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
GS.2 <- read.csv(here("Data","DY23-07_A&B_priority_Gear.Sampled2_Vector.csv"))
WGOAdata <- WGOAdata %>% left_join(.,GS.2)
View(WGOAdata)
write.csv(ODsta, here("Data","For Dyson","DY23-07 GS2 Bugs.csv"), row.names = FALSE)
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
GS.2 <- read.csv(here("Data","DY23-07_A&B_priority_Gear.Sampled2_Vector.csv"))
WGOAdata <- WGOAdata %>% left_join(.,GS.2)
View(WGOAdata)
write.csv(ODsta, here("Data","For Dyson","DY23-07 GS2 Bugs.csv"), row.names = FALSE)
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
View(WGOAdata)
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
GS.2 <- read.csv(here("Data","DY23-07_A&B_priority_Gear.Sampled2_Vector.csv"))
WGOAdata <- WGOAdata %>% left_join(.,GS.2)
write.csv(ODsta, here("Data","For Dyson","DY23-07 GS2 Bugs.csv"), row.names = FALSE)
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
View(WGOAdata)
CVgrid <- c(114:142)
WGOA_StaCVg <- WGOA_StaTable %>% filter(Station %in% CVgrid)
CVgrid <- c(114:142)
WGOA_StaTable <- WGOA_StaTable %>% filter(Station %in% CVgrid)
ScenName <- "CalVetGrid Stations"
#WGOA_StaTable$LON <- WGOA_StaTable$LON*-1
# get bathymetry data
CVgrid <- c(114:142)
WGOA_StaTable <- WGOA_StaTable %>% filter(Station %in% CVgrid)
ScenName <- "CalVetGrid Stations"
b = getNOAA.bathy(lon1 = min(WGOA_StaTable$LON)+-1, lon2 = max(WGOA_StaTable$LON)+1,
lat1 = min(WGOA_StaTable$LAT)+-1, lat2 = max(WGOA_StaTable$LAT)+1,
resolution = 15)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# set map limits, whole region
lons = c(min(WGOA_StaTable$LON)+-1, max(WGOA_StaTable$LON)+1) #-140 = large map
lats = c(min(WGOA_StaTable$LAT)+-1,max(WGOA_StaTable$LAT)+1) # 52 = large map
# Create Color Vector: stoplight
stpliteCol <- c("blue","orange","red")
# Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = WGOA_StaTable, mapping = aes(LON, LAT, shape = Gear.Sampled, color= Sta_Pri), size = 2)+
#geom_path(data = WGOA_StaTable, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = WGOA_StaTable, mapping = aes(LON, LAT, label = Grid.ID ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+
scale_color_manual(values = stpliteCol)+
ggtitle(paste(ScenName)) +
theme(axis.text.x=element_text(size=8,hjust = 1,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
ggsave(paste0(ScenName,".png"),path = here("Docs"), height = 8.5, width = 11, units = "in")
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions_GS2.csv"))
# If using "WGOA station_list_dougherty_2019_ProjInstrutions.csv" as WGOAdata, run the following
# changing "Gear.Sampled" to reflect no neustons and Bongos at every station
WGOAdata <- WGOAdata %>% rename("LAT" = "Latitude.N.") %>% rename("LON"="Longitude..W.") %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "","BONGO")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "NEU","BONGO")) %>%
mutate(Gear.Sampled =  replace(Gear.Sampled,Gear.Sampled == "NEU, CTD","BONGO,CTD")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CTD","BONGO,CTD")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CALVET","BONGO,CALVET")) %>%
mutate(Gear.Sampled = replace(Gear.Sampled,Gear.Sampled == "CALVET, CTD","BONGO,CALVET,CTD"))
WGOAdata$LON <- WGOAdata$LON*-1
# Create table, remove all CTDs not part of transects; create "A,B,C" station vectors
# Note: Station 0 = Dutch Harbor, 271 = Kodiak Pier
# Below is an EXAMPLE to get code to run and plot proper (4/27/23)
A <- c(0,24:28, 53:59, 77:84,93:100,108:113,120:125,132:141,148:152,160:165,
167,169,171,173,175,177,208:213,225:228,220,218,216,234:238,271)
B <- c(1:9, 38:44,68:76,85:92,101:107,114:119,126:131,142:147,153:159,166,168,170,
172,174,176,178,179,180)
Port <-c(0)
# C = anything not A & B, see line 121 below
#moved rom B to C <- c(181, 201:197, 224:221,219,217,215,214,229:233,239,243:245,
#       249:251,255:257,261:263,267:269)
WGOA_StaTable <- WGOAdata %>% select(Station, Grid.ID,LAT,LON,Gear.Sampled) %>%
mutate(Gear.Sampled = ifelse(Station == 24,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station == 40,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station == 94,"BONGO",Gear.Sampled)) %>%
mutate(Gear.Sampled = ifelse(Station %in% Port,"",Gear.Sampled)) %>%
mutate(Sta_Pri = if_else(Station %in% A,"A",if_else(Station %in% B,"B","C")))
## Remove C priority Stations; filter dropped stations from Outlook
# Outlook Stations left, in order
StaTDL<-c(1:9,24:28,59:53,84:77, 92:85, 100:93, 107:101,113:108,119:114,
125:120,131:126,136:132,141:137,142:147,152:148, 156:153, 159:157,165:160,
166:179,180,213:208,216,218,220,228:225,234:238,271)
WGOA_StaTable <- WGOA_StaTable %>% filter(Sta_Pri != "C") %>%
filter(Station %in% StaTDL)
ScenName <- "DY23-07 All A & B Priority Stations"
write.csv(WGOA_StaTable, here("Data","DY23-07_A&B_priority.csv"))
#WGOA_StaTable$LON <- WGOA_StaTable$LON*-1
# get bathymetry data
#CVgrid <- c(114:142)
#WGOA_StaTable <- WGOA_StaTable %>% filter(Station %in% CVgrid)
#ScenName <- "CalVetGrid Stations"
b = getNOAA.bathy(lon1 = min(WGOA_StaTable$LON)+-1, lon2 = max(WGOA_StaTable$LON)+1,
lat1 = min(WGOA_StaTable$LAT)+-1, lat2 = max(WGOA_StaTable$LAT)+1,
resolution = 15)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# set map limits, whole region
lons = c(min(WGOA_StaTable$LON)+-1, max(WGOA_StaTable$LON)+1) #-140 = large map
lats = c(min(WGOA_StaTable$LAT)+-1,max(WGOA_StaTable$LAT)+1) # 52 = large map
# Create Color Vector: stoplight
stpliteCol <- c("blue","orange","red")
# Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = WGOA_StaTable, mapping = aes(LON, LAT, shape = Gear.Sampled, color= Sta_Pri), size = 2)+
#geom_path(data = WGOA_StaTable, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = WGOA_StaTable, mapping = aes(LON, LAT, label = Grid.ID ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+
scale_color_manual(values = stpliteCol)+
ggtitle(paste(ScenName)) +
theme(axis.text.x=element_text(size=8,hjust = 1,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
ggsave(paste0(ScenName,".png"),path = here("Docs"), height = 8.5, width = 11, units = "in")
# Load Station Data Table from DY19-05
#WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv"))
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
# Filter our "B" priority stations
#WGOAdata <- WGOAdata %>% filter(Sta_Pri=="A")
### Create Station & Runtime Dataset ############
#All Stations
AllSta<- c(0, 1:9,28:24,38:44,59:53,68:179,180,213:208,216:220,228:225,234:238,271)
# Log of Removed Stations before Survey
# (5/11/23): B 38:44,68:76
#Stations Left to Sample
# Completed Stations
CompleteScenL <- length(c(1:6)) #Fill in with completed StaTDL stations
# Staions Remaining
StaTDL<-c(7:9,24:28,59:53,84:77,92:85,100:93,107:101,113:108,119:114,
125:120,131:126,136:132,141:137,147:142,152:148, 156:153, 159:157,165:160,
166:179,180,213:208,216,218,220,228:225,234:238,271)
# Reverse Order Stations for Reference (DO NOT DELETE)
#
#            c(1:9,24:28,59:53,84:77, 92:85, 100:93, 107:101,113:108,119:114,
#           125:120, 131:126, 136:132,141:137, 142:142,152:148, 156:153, 159:157,165:160,
#           166:179,180,213:208,216:220,228:225,234:238,271)
ScenName <- "Stations Remaining"
Scenario<-StaTDL # Always Change to Updated Stations Remaining
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= (CompleteScenL+1):(CompleteScenL+length(Scenario)))
# 1. Station Selection Through Scenario (above)
Sta <- WGOAdata %>% left_join(.,FinalSta) %>%
filter(Station %in% FinalSta$Station) %>%
arrange(Stn_Order)
# 2. Choose Departure Date
DH_SIP <- ymd_hm("2023-05-15 12:00")
#depart <- DH_SIP + dhours(9) # pre-survey calculations, takes ~8 hours to get to STA 1 from DH
depart <- lubridate::now(tzone = "America/Adak") # Alaska time, for at sea calculations
# 3. Create data.frame that mirrors "Final Station Runtime.xlsx"
# If using smalled CalVET grid, use "Gear.Sampled2".  Also, change Gear.Sampled on lines 86-89 & 119-120
SRTdata <- Sta %>%
mutate(Bongo_hrs = ifelse(Gear.Sampled == "BONGO", 0.33,0)) %>% # BONGO at all stations
mutate(BON_CTD_hrs = ifelse(Gear.Sampled == "BONGO,CTD",0.83,0)) %>%
mutate(BON_CalVET_hrs = ifelse(Gear.Sampled == "BONGO,CALVET", 0.66,0)) %>%
mutate(BON_Cal_CTD_hrs = ifelse(Gear.Sampled == "BONGO,CALVET,CTD",1.16,0)) %>%
#<<<<<<< Updated upstream
mutate(Station_Time = lubridate::dhours(rowSums(across(c(Bongo_hrs,BON_CTD_hrs,BON_CalVET_hrs,BON_Cal_CTD_hrs))))) %>%
mutate(Ship_Speed = 11) %>%  # Ship speed is Variable
mutate(lat_rad = LAT*pi/180) %>% mutate(long_rad = LON*pi/180) %>%
mutate(long_dif = long_rad - shift(long_rad)) %>%
#>>>>>>> Stashed changes
mutate(Dist_NM = ifelse(Station == 0,0,0) ) %>%
mutate(Dist_NM = distGeo(cbind(LON,LAT),cbind(shift(LON),shift(LAT)))/(1000*1.852)) %>% # distGEO does what code below does in base r
#  mutate(Dist_NM = acos((sin(lag(lat_rad))*sin(lat_rad))+(cos(lag(lat_rad))*cos(lat_rad)*cos(long_dif)))/(pi/180)*60) %>%
mutate(Steam_T = Dist_NM/Ship_Speed) %>%
mutate(Steam_T = lubridate::dhours(Steam_T))
# Write .csv of new Station Order for Ships gpx info
ODsta <- SRTdata %>% select(Grid.ID,LAT,LON,Gear.Sampled2,Stn_Order)
# Load Station Data Table from DY19-05
#WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv"))
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
# Filter our "B" priority stations
#WGOAdata <- WGOAdata %>% filter(Sta_Pri=="A")
### Create Station & Runtime Dataset ############
#All Stations
AllSta<- c(0, 1:9,28:24,38:44,59:53,68:179,180,213:208,216:220,228:225,234:238,271)
# Log of Removed Stations before Survey
# (5/11/23): B 38:44,68:76
#Stations Left to Sample
# Completed Stations
CompleteScenL <- length(c(1:6)) #Fill in with completed StaTDL stations
# Staions Remaining
StaTDL<-c(7:9,24:28,59:53,84:77,92:85,100:93,107:101,113:108,119:114,
125:120,131:126,136:132,141:137,147:142,152:148, 156:153, 159:157,165:160,
166:179,180,213:208,216,218,220,228:225,234:238,271)
# Reverse Order Stations for Reference (DO NOT DELETE)
#
#            c(1:9,24:28,59:53,84:77, 92:85, 100:93, 107:101,113:108,119:114,
#           125:120, 131:126, 136:132,141:137, 142:142,152:148, 156:153, 159:157,165:160,
#           166:179,180,213:208,216:220,228:225,234:238,271)
ScenName <- "Stations Remaining"
Scenario<-StaTDL # Always Change to Updated Stations Remaining
FinalSta<-data.frame("Station"=Scenario,"Stn_Order"= (CompleteScenL+1):(CompleteScenL+length(Scenario)))
# 1. Station Selection Through Scenario (above)
Sta <- WGOAdata %>% left_join(.,FinalSta) %>%
filter(Station %in% FinalSta$Station) %>%
arrange(Stn_Order)
# 2. Choose Departure Date
DH_SIP <- ymd_hm("2023-05-15 12:00")
#depart <- DH_SIP + dhours(9) # pre-survey calculations, takes ~8 hours to get to STA 1 from DH
depart <- lubridate::now(tzone = "America/Adak") # Alaska time, for at sea calculations
# 3. Create data.frame that mirrors "Final Station Runtime.xlsx"=
SRTdata <- Sta %>%
mutate(Bongo_hrs = ifelse(Gear.Sampled == "BONGO", 0.33,0)) %>% # BONGO at all stations
mutate(BON_CTD_hrs = ifelse(Gear.Sampled == "BONGO,CTD",0.83,0)) %>%
mutate(BON_CalVET_hrs = ifelse(Gear.Sampled == "BONGO,CALVET", 0.66,0)) %>%
mutate(BON_Cal_CTD_hrs = ifelse(Gear.Sampled == "BONGO,CALVET,CTD",1.16,0)) %>%
#<<<<<<< Updated upstream
mutate(Station_Time = lubridate::dhours(rowSums(across(c(Bongo_hrs,BON_CTD_hrs,BON_CalVET_hrs,BON_Cal_CTD_hrs))))) %>%
mutate(Ship_Speed = 11) %>%  # Ship speed is Variable
mutate(lat_rad = LAT*pi/180) %>% mutate(long_rad = LON*pi/180) %>%
mutate(long_dif = long_rad - shift(long_rad)) %>%
#>>>>>>> Stashed changes
mutate(Dist_NM = ifelse(Station == 0,0,0) ) %>%
mutate(Dist_NM = distGeo(cbind(LON,LAT),cbind(shift(LON),shift(LAT)))/(1000*1.852)) %>% # distGEO does what code below does in base r
#  mutate(Dist_NM = acos((sin(lag(lat_rad))*sin(lat_rad))+(cos(lag(lat_rad))*cos(lat_rad)*cos(long_dif)))/(pi/180)*60) %>%
mutate(Steam_T = Dist_NM/Ship_Speed) %>%
mutate(Steam_T = lubridate::dhours(Steam_T))
# Write .csv of new Station Order for Ships gpx info
ODsta <- SRTdata %>% select(Grid.ID,LAT,LON,Gear.Sampled,Stn_Order)
write.csv(ODsta, here("Data","For Dyson","DY23-07 Survey Station Order.csv"), row.names = FALSE) #Error if file open
# 4. rearrange data to calculate time to travel to and complete station operations
shipslog <- SRTdata %>% select(Station, Grid.ID, Station_Time, Steam_T, Stn_Order) %>% # SRTdata will be replaced by filtered stations above
unite("Station",Station:Grid.ID, sep = "_", remove = FALSE) %>%
select(Station,Steam_T,Station_Time,Stn_Order) %>%
gather(key="Ops", Time_Dur, -Station,-Stn_Order) %>% arrange(Station) %>%
separate(Station, c("Station","Grid.ID"), sep = "_") %>%
transform(Station = as.numeric(Station)) %>% arrange(Stn_Order)
shipslog <- na.omit(shipslog)
# 5. Create a table of Station Completion Times
ShipsLog <- shipslog %>% group_by(Stn_Order, Station, Grid.ID) %>%
reframe(Time_Dur = lubridate::dseconds(sum(Time_Dur)))  %>%
mutate(Sta_Time =  depart) %>% mutate(cTime_Dur = cumsum(Time_Dur)) %>%
mutate(Sta_Time = cTime_Dur + Sta_Time) %>% select(Stn_Order, Grid.ID,Sta_Time) %>%
rename("Station"="Stn_Order","Grid Station"="Grid.ID","Est.Station Time"="Sta_Time")
#6. Create a table to link Gear.Sampled for daily stations in ShipsLog to know Operations at each station
Sta_GearSamp <- SRTdata %>% select(Station,Grid.ID,LAT,LON,Gear.Sampled) %>%
filter(Station %in% FinalSta$Station) %>% select(Grid.ID,LAT,LON,Gear.Sampled) %>%
rename("Grid Station"="Grid.ID")
ShipsLog <- left_join(ShipsLog,Sta_GearSamp, by = "Grid Station") %>%
select(Station,`Grid Station`,LAT,LON,Gear.Sampled,`Est.Station Time`)
# Output Station Table, include: Ships Log
kbl(ShipsLog, caption = "Next Stations", booktabs = T) %>%
kableExtra::kable_styling(bootstrap_options = "bordered", latex_options = c("striped", "HOLD_position"))
depart
depart <- lubridate::now(tzone = "America/Anchorage")
#WGOA_StaTable$LON <- WGOA_StaTable$LON*-1
# get bathymetry data
#CVgrid <- c(114:142)
#WGOA_StaTable <- WGOA_StaTable %>% filter(Station %in% CVgrid)
#ScenName <- "CalVetGrid Stations"
b = getNOAA.bathy(lon1 = min(WGOA_StaTable$LON)+-1, lon2 = max(WGOA_StaTable$LON)+1,
lat1 = min(WGOA_StaTable$LAT)+-1, lat2 = max(WGOA_StaTable$LAT)+1,
resolution = 15)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# set map limits, whole region
lons = c(min(WGOA_StaTable$LON)+-1, max(WGOA_StaTable$LON)+1) #-140 = large map
lats = c(min(WGOA_StaTable$LAT)+-1,max(WGOA_StaTable$LAT)+1) # 52 = large map
# Create Color Vector: stoplight
stpliteCol <- c("blue","orange","red")
# Plot filtered station map with survey track
StaMapF <-ggplot()+geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-50),linewidth=c(0.5),colour="light grey")+ # add 50m contour
geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), linewidth=c(0.5), colour="darkgrey")+ # add 100m contour
geom_contour(data = bf, aes(x=x, y=y, z=z),breaks=c(-200),linewidth=c(0.3), colour="black")+ # add 200m contour
geom_sf(data = world)+coord_sf(xlim = lons, ylim = lats, expand = FALSE)+ # add coastline
#Plot points & station track
geom_point(data = WGOA_StaTable, mapping = aes(LON, LAT, shape = Gear.Sampled, color= Sta_Pri), size = 2)+
#geom_path(data = WGOA_StaTable, mapping = aes(LON, LAT), linewidth = 0.25) +
geom_text(data = WGOA_StaTable, mapping = aes(LON, LAT, label = Station ), nudge_y = -0.08, size = 2.5)+
scale_shape_discrete()+ theme_bw()+xlab("Longitude")+ylab("Latitude")+
scale_color_manual(values = stpliteCol)+
ggtitle(paste(ScenName)) +
theme(axis.text.x=element_text(size=8,hjust = 1,vjust = 1, angle = 45, color = "black"), axis.text.y = element_text(size=8, color = "black"))
StaMapF
ggsave(paste0(ScenName,".png"),path = here("Docs"), height = 8.5, width = 11, units = "in")
Sta <- WGOAdata %>% left_join(.,FinalSta) %>%
filter(Station %in% FinalSta$Station) %>%
arrange(Stn_Order)
View(Sta)
WGOAdata <- WGOAdata %>% filter(Sta_Pri == "B") %>% filter(Station > 156)
warnErrList()
View(WGOAdata)
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
WGOAdata <- WGOAdata %>% filter(Sta_Pri == "B") %>% filter(Station !> 156)
STA.0516 <- c(157:159,166,168,170,172,174,176,178-180)
WGOAdata <- WGOAdata %>% filter(Station %in% STA.0516)
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
WGOAdata <- WGOAdata %>% filter !(Station %in% STA.0516)
STA.0516 <- c(157:159,166,168,170,172,174,176,178:180)
subset(WGOAdata,!(Station %in% STA.0516))
View(WGOAdata)
WGOAdata <- read.csv(here("Data","DY23-07_A&B_priority.csv"))
WGOAdata <- WGOAdata %>% subset(!(Station %in% STA.0516))
View(WGOAdata)
STA.0516 <- c(157:159,166,168,170,172,174,176,178:180)
STA.0517 <- c(85:92,101:107)
xtest <- STA.0517 + STA.0516
xtest <- c(STA.0516,STA.0517)
B_Drop_Vec <- c(STA.0516,STA.0517)
