dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% unique()
View(Sta_Count_15_Present)
?arrange
Sta_Count_15_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(YEAR,HAUL_ID) %>%
dplyr::mutate(YEAR = as.factor(YEAR)) %>%
tidyr::separate_wider_delim(HAUL_ID," ",names = c("CRUISE","STATION","HAUL","GEAR","NET"), names_repair = "unique") %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% unique() %>% dplyr::arrange(YEAR,STATION)
View(Sta_Count_15_Present)
Sta_Count_15_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(YEAR,HAUL_ID) %>%
dplyr::mutate(YEAR = as.factor(YEAR)) %>%
tidyr::separate_wider_delim(HAUL_ID," ",names = c("CRUISE","STATION","HAUL","GEAR","NET"), names_repair = "unique") %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% unique() %>% dplyr::select(CRUISE, STATION) %>%
group_by(CRUISE) %>% summarise(count = n())
View(Sta_Count_15_Present)
Sta_Count_15_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(YEAR,HAUL_ID) %>%
dplyr::mutate(YEAR = as.factor(YEAR)) %>%
tidyr::separate_wider_delim(HAUL_ID," ",names = c("CRUISE","STATION","HAUL","GEAR","NET"), names_repair = "unique") %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% dplyr::select(CRUISE, STATION)  %>% unique() %>%
group_by(CRUISE) %>% summarise(count = n())
View(Sta_Count_15_Present)
glimpse(Sta_Count_15_Present)
Sta_DATE_13_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv"))
glimpse(Sta_DATE_13_Present)
Sta_DATE_13_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(CRUISE,GMT_DATE_TIME_TXT) %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% mutate(DATE = as.data(GMT_DATE_TIME_TXT)) %>%
group_by(CRUISE) %>% summarise(START_DATE = min(DATE), END_DATE = max(DATE),
Days_Count = as.integer(difftime(max(DATE), min(DATE), units = "days")) + 1)
Sta_DATE_13_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(CRUISE,GMT_DATE_TIME_TXT) %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% mutate(DATE = as.date(GMT_DATE_TIME_TXT)) %>%
group_by(CRUISE) %>% summarise(START_DATE = min(DATE), END_DATE = max(DATE),
Days_Count = as.integer(difftime(max(DATE), min(DATE), units = "days")) + 1)
Sta_DATE_13_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(CRUISE,GMT_DATE_TIME_TXT) %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% mutate(DATE = as.Date(GMT_DATE_TIME_TXT)) %>%
group_by(CRUISE) %>% summarise(START_DATE = min(DATE), END_DATE = max(DATE),
Days_Count = as.integer(difftime(max(DATE), min(DATE), units = "days")) + 1)
View(Sta_DATE_13_Present)
Sta_Sampled <- left_join(Sta_Count_15_Present, Sta_DATE_13_Present, by = "CRUISE")
View(Sta_Sampled)
write.csv(Sta_Sampled,file = here("Data","2025-02-06 Spring Larval Stations Sampled 13-19.csv"))
Sta_Sampled <- left_join(Sta_Count_15_Present, Sta_DATE_13_Present, by = "CRUISE") %>% dplyr::rename("Station Count" = "count") %>%
mutate(Sta_per_Day = (`Station Count`/Days_Count))
View(Sta_Sampled)
Sta_Count_13_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(YEAR,HAUL_ID) %>%
dplyr::mutate(YEAR = as.factor(YEAR)) %>%
tidyr::separate_wider_delim(HAUL_ID," ",names = c("CRUISE","STATION","HAUL","GEAR","NET"), names_repair = "unique") %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% dplyr::select(CRUISE, STATION)  %>% unique() %>%
group_by(CRUISE) %>% summarise(count = n())
Sta_DATE_13_Present <- read.csv(here("Data","2023_10_12-All_Zooplankton.csv")) %>% dplyr::select(CRUISE,GMT_DATE_TIME_TXT) %>%
dplyr::filter(CRUISE %in% c("DY13-06","DY15-05","DY17-05","DY19-05")) %>% mutate(DATE = as.Date(GMT_DATE_TIME_TXT)) %>%
group_by(CRUISE) %>% summarise(START_DATE = min(DATE), END_DATE = max(DATE),
Days_Count = as.integer(difftime(max(DATE), min(DATE), units = "days")) + 1)
Sta_Sampled <- left_join(Sta_Count_13_Present, Sta_DATE_13_Present, by = "CRUISE") %>% dplyr::rename("Station Count" = "count") %>%
mutate(Sta_per_Day = (`Station Count`/Days_Count))
write.csv(Sta_Sampled,file = here("Data","2025-02-06 Spring Larval Stations Sampled 13-19.csv"))
write.csv(Sta_Sampled,file = here("Data","2025-02-06 Spring Larval Stations Sampled 13-19.csv"))
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyr",  "dplyr", "ggplot2", "ggmap", "lattice", "here",
"rnaturalearth","marmap","readxl", "data.table", "geosphere",
"lubridate","hms", "stringr","tibble","readxl", "sf","maps",
"mapdata","mapplots", "mapview","Cairo", "ncdf4","oce", "here",
"reshape2", "viridis", "export", "rnaturalearth",
"rnaturalearthdata", "forcats", "geosphere", "shiny",
"plotly","clipr")
ipak(packages)
EBSdata <- read.csv(here("Data","UpdatedEBSdata_DY2407_Grid.IDList.csv"))
here()
?read.csv
EBSdata <- read.csv(here("Data","UpdatedEBSdata_DY2407_Grid.IDList.csv"))
EBSdata <- read.csv(here("Data","UpdatedEBSdata_DY2407_StationList.csv"))
str(EBSdata)
?str
glimpse(EBSdata)
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv")) %>%
rename("LAT" = "Latitude.N.") %>% rename("LON"="Longitude..W.")
WGOAdata$LON <- WGOAdata$LON*-1
GridStaData <- read.csv(here("Data","2023-10-18 WGOA Grid Sta Depth Data.csv"))
GridMeanZ <- GridStaData %>% group_by(FOCI_GRID) %>% summarise(MeanZ = mean(BOTTOM_DEPTH))
View(GridMeanZ)
glimpse(GridMeanZ)
glimpse(WGOAdata)
GridMeanZ <- GridStaData %>% dplyr::rename("Grid.ID" = "FOCI_GRID") %>%
group_by(Grid.ID) %>% summarise(MeanZ = mean(BOTTOM_DEPTH))
glimpse(GridMeanZ)
?left_join
WGOAdata_z <- dplyr::left_join(WGOAdata,GridMeanZ, by "Grid.ID")
GridMeanZ <- GridStaData %>% dplyr::rename("Grid.ID" = "FOCI_GRID") %>%
mutate(Grid.ID = tolower(Grid.ID)) %>%
group_by(Grid.ID) %>% summarise(MeanZ = mean(BOTTOM_DEPTH))
View(GridMeanZ)
View(WGOAdata)
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv")) %>%
rename("LAT" = "Latitude.N.") %>% rename("LON"="Longitude..W.") %>% mutate(Grid.ID = tolower(Grid.ID))
WGOAdata$LON <- WGOAdata$LON*-1
WGOAdata <- read.csv(here("Data","WGOA station_list_dougherty_2019_ProjInstrutions.csv")) %>%
rename("LAT" = "Latitude.N.") %>% rename("LON"="Longitude..W.") %>% mutate(Grid.ID = tolower(Grid.ID))
WGOAdata$LON <- WGOAdata$LON*-1
GridStaData <- read.csv(here("Data","2023-10-18 WGOA Grid Sta Depth Data.csv"))
GridMeanZ <- GridStaData %>% dplyr::rename("Grid.ID" = "FOCI_GRID") %>%
mutate(Grid.ID = tolower(Grid.ID)) %>%
group_by(Grid.ID) %>% summarise(MeanZ = mean(BOTTOM_DEPTH))
WGOAdata_z <- dplyr::left_join(WGOAdata,GridMeanZ, by = "Grid.ID")
View(WGOAdata_z)
View(EBSdata)
library(shiny)
library(plotly)
library(Cairo)
library(sf)
library(dplyr)
library(geosphere)
# Sample data frame with station locations (longitude, latitude)
stations <- data.frame(
Station = c("Station1", "Station2", "Station3"),
Longitude = c(-170.0, -165.5, -160.0),
Latitude = c(56.0, 57.5, 59.0)
)
# Convert to sf object
stations_sf <- st_as_sf(stations, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Bering Sea Stations Map"),
sidebarLayout(
sidebarPanel(
h4("Click on the stations to add them to the table"),
tableOutput("selected_stations_table")
),
mainPanel(
plotlyOutput("map")
)
)
)
server <- function(input, output, session) {
selected_stations <- reactiveVal(data.frame(Station = character(), Longitude = numeric(), Latitude = numeric()))
output$map <- renderPlotly({
p <- plot_ly(data = stations_sf, type = 'scattergeo', mode = 'markers') %>%
add_markers(
x = ~st_coordinates(stations_sf)[, 1],
y = ~st_coordinates(stations_sf)[, 2],
text = ~Station,
marker = list(size = 10)
) %>%
layout(
geo = list(
projection = list(type = "mercator"),
scope = "north america"
)
)
p <- p %>%
event_register("plotly_click")
p
})
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
clicked_station <- stations_sf[click_data$pointNumber + 1, ]
selected_stations(
rbind(selected_stations(), clicked_station)
)
}
})
output$selected_stations_table <- renderTable({
stations <- selected_stations()
if (nrow(stations) > 1) {
distances <- sapply(2:nrow(stations), function(i) {
distGeo(c(stations$Longitude[i - 1], stations$Latitude[i - 1]), c(stations$Longitude[i], stations$Latitude[i])) / 1000
})
stations <- cbind(stations, Distance = c(NA, distances))
} else {
stations <- cbind(stations, Distance = NA)
}
stations
})
}
shinyApp(ui, server)
stations <- data.frame(
Station = c("Station1", "Station2", "Station3"),
Longitude = c(-170.0, -165.5, -160.0),
Latitude = c(56.0, 57.5, 59.0)
)
# Convert to sf object
stations_sf <- st_as_sf(stations, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Bering Sea Stations Map"),
sidebarLayout(
sidebarPanel(
h4("Click on the stations to add them to the table"),
tableOutput("selected_stations_table")
),
mainPanel(
plotlyOutput("map")
)
)
)
server <- function(input, output, session) {
selected_stations <- reactiveVal(data.frame(Station = character(), Longitude = numeric(), Latitude = numeric()))
output$map <- renderPlotly({
p <- plot_ly(data = stations_sf, type = 'scattergeo', mode = 'markers') %>%
add_markers(
x = ~st_coordinates(stations_sf)[, 1],
y = ~st_coordinates(stations_sf)[, 2],
text = ~Station,
marker = list(size = 10)
) %>%
layout(
geo = list(
projection = list(type = "mercator"),
scope = "north america"
)
)
p <- p %>%
event_register("plotly_click")
p
})
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
clicked_station <- stations_sf[click_data$pointNumber + 1, ]
selected_stations(
rbind(selected_stations(), clicked_station)
)
}
})
output$selected_stations_table <- renderTable({
stations <- selected_stations()
if (nrow(stations) > 1) {
distances <- sapply(2:nrow(stations), function(i) {
distGeo(c(stations$Longitude[i - 1], stations$Latitude[i - 1]), c(stations$Longitude[i], stations$Latitude[i])) / 1000
})
stations <- cbind(stations, Distance = c(NA, distances))
} else {
stations <- cbind(stations, Distance = NA)
}
stations
})
}
shinyApp(ui, server)
stations_sf <- st_as_sf(stations, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Bering Sea Stations Map"),
sidebarLayout(
sidebarPanel(
h4("Click on the stations to add them to the table"),
tableOutput("selected_stations_table")
),
mainPanel(
plotlyOutput("map")
)
)
)
server <- function(input, output, session) {
selected_stations <- reactiveVal(data.frame(Station = character(), Longitude = numeric(), Latitude = numeric()))
output$map <- renderPlotly({
p <- plot_ly(data = stations_sf, type = 'scattergeo', mode = 'markers') %>%
add_markers(
x = ~st_coordinates(stations_sf)[, 1],
y = ~st_coordinates(stations_sf)[, 2],
text = ~Station,
marker = list(size = 10)
) %>%
layout(
geo = list(
projection = list(type = "mercator"),
scope = "north america"
)
)
p <- p %>%
event_register("plotly_click")
p
})
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
clicked_station <- stations_sf[click_data$pointNumber + 1, ]
selected_stations(
rbind(selected_stations(), clicked_station)
)
}
})
output$selected_stations_table <- renderTable({
stations <- selected_stations()
if (nrow(stations) > 1) {
distances <- sapply(2:nrow(stations), function(i) {
distGeo(c(stations$Longitude[i - 1], stations$Latitude[i - 1]), c(stations$Longitude[i], stations$Latitude[i])) / 1000
})
stations <- cbind(stations, Distance = c(NA, distances))
} else {
stations <- cbind(stations, Distance = NA)
}
stations
})
}
shinyApp(ui, server)
stations <- data.frame(
Station = c("Station1", "Station2", "Station3"),
Longitude = c(-170.0, -165.5, -160.0),
Latitude = c(56.0, 57.5, 59.0)
)
# Convert to sf object
stations_sf <- st_as_sf(stations, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Bering Sea Stations Map"),
sidebarLayout(
sidebarPanel(
h4("Click on the stations to add them to the table"),
tableOutput("selected_stations_table")
),
mainPanel(
plotlyOutput("map")
)
)
)
server <- function(input, output, session) {
selected_stations <- reactiveVal(data.frame(Station = character(), Longitude = numeric(), Latitude = numeric()))
output$map <- renderPlotly({
p <- plot_ly(data = stations_sf, type = 'scattergeo', mode = 'markers') %>%
add_markers(
x = ~st_coordinates(stations_sf)[, 1],
y = ~st_coordinates(stations_sf)[, 2],
text = ~Station,
marker = list(size = 10)
) %>%
layout(
geo = list(
projection = list(type = "mercator"),
scope = "world",
center = list(lon = -165, lat = 57.5),
resolution = 50,
showland = TRUE,
showcoastlines = TRUE
)
)
p <- p %>%
event_register("plotly_click")
p
})
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
clicked_station <- stations_sf[click_data$pointNumber + 1, ]
current_stations <- selected_stations()
updated_stations <- rbind(current_stations, clicked_station)
selected_stations(updated_stations)
}
})
output$selected_stations_table <- renderTable({
stations <- selected_stations()
if (nrow(stations) > 1) {
distances <- sapply(2:nrow(stations), function(i) {
distGeo(c(stations$Longitude[i - 1], stations$Latitude[i - 1]), c(stations$Longitude[i], stations$Latitude[i])) / 1000
})
stations <- cbind(stations, Distance = c(NA, distances))
} else {
stations <- cbind(stations, Distance = NA)
}
stations
})
}
shinyApp(ui, server)
b = marmap::getNOAA.bathy(lon1 = -180, lon2 = -140, lat1 = 50, lat2 = 70, resolution = 10)
# convert bathymetry to data frame
bf = fortify.bathy(b)
server <- function(input, output, session) {
output$plot <- renderPlotly({
p <- ggplot()+
coord_map("albers", parameters=c(37, 59),xlim=c(-174,-158),ylim=c(53.5,60))+
# add 50m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-50),
linewidth=c(0.5),
linetype='dashed',
colour="grey90")+
geom_text(data=EBSdata %>% filter(Grid.ID=="AX61"),aes(x=LON, y=LAT, label="50m"),colour="grey90", size=4,
fontface="bold",nudge_x=.1, nudge_y=.3)+
# add 100m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-100),
linewidth=c(0.5),
linetype='dashed',
colour="grey80")+
geom_text(data=EBSdata %>% filter(Grid.ID=="BV61"),aes(x=LON, y=LAT, label="100m"),colour="grey80", size=4,
fontface="bold",nudge_x=0, nudge_y=0.3)+
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-200),
linewidth=c(0.5),
linetype='dashed',
colour="grey70")+
geom_text(data=EBSdata %>% filter(Grid.ID=="CB61"),aes(x=LON, y=LAT, label="200m"),colour="grey70", size=4,
fontface="bold",nudge_x=-0.75, nudge_y=0)+
geom_polygon(data = w1, aes(x=long, y = lat, group = group),colour="black", fill="darkgrey")+
geom_path(data=EBSdata %>% filter(TYPE=="Core") %>% arrange(Grid.ID),aes(x=LON, y=LAT, color=Grid.ID), colour="black")+
geom_point(data = EBSdata %>% filter(TYPE=="Core"), aes(x=LON, y=LAT, key=Grid.ID, fill=Sta_Pri), color="black",size=4, shape=21)+
# scale_fill_manual(values=c("blue","red"))+
geom_text(data=EBSdata %>% filter(TYPE=="Core"),aes(x=LON, y=LAT, label=Grid.ID), size=4, colour="black",
fontface="bold",nudge_x=-0.09, nudge_y=-0.09)+
scale_x_continuous(name="Longitude",expand = c(0,0))+
scale_y_continuous(name="Latitude",expand = c(0,0))+
theme_bw()+
theme(
plot.title=element_text(size=20, color="black"),
axis.text.x=element_text(size=20, color = "black"),
axis.text.y = element_text(size=20, color = "black"),
axis.title.y = element_text(size=20, color = "black"),
axis.title.x = element_text(size=20, color = "black"),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_line(color="gray85"),
panel.grid.minor = element_line(color="gray85"),
legend.background = element_rect(fill='transparent'),
# legend.box.background = element_rect(fill='transparent'),
legend.position = c(0.1,0.2),
# legend.position = "right",
legend.title = element_text(size=20, color="black"),
legend.text = element_text(size=18, color="black"))+
ggtitle("DY24-07 EcoFOCI Spring Ichthyoplankton Survey")
ggplotly(p) %>%
layout(dragmode = "lasso")
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (!is.null(d)) d
})
output$brush <- renderPrint({
d <- event_data("plotly_selected")
if (!is.null(d)) d
})
observeEvent(input$copy, {
write_clip(brushedPoints(EBSdata, input$plotly_selected), object_type = "table")
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlotly({
p <- ggplot()+
coord_map("albers", parameters=c(37, 59),xlim=c(-174,-158),ylim=c(53.5,60))+
# add 50m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-50),
linewidth=c(0.5),
linetype='dashed',
colour="grey90")+
geom_text(data=EBSdata %>% filter(Grid.ID=="AX61"),aes(x=LON, y=LAT, label="50m"),colour="grey90", size=4,
fontface="bold",nudge_x=.1, nudge_y=.3)+
# add 100m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-100),
linewidth=c(0.5),
linetype='dashed',
colour="grey80")+
geom_text(data=EBSdata %>% filter(Grid.ID=="BV61"),aes(x=LON, y=LAT, label="100m"),colour="grey80", size=4,
fontface="bold",nudge_x=0, nudge_y=0.3)+
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
breaks=c(-200),
linewidth=c(0.5),
linetype='dashed',
colour="grey70")+
geom_text(data=EBSdata %>% filter(Grid.ID=="CB61"),aes(x=LON, y=LAT, label="200m"),colour="grey70", size=4,
fontface="bold",nudge_x=-0.75, nudge_y=0)+
geom_polygon(data = w1, aes(x=long, y = lat, group = group),colour="black", fill="darkgrey")+
geom_path(data=EBSdata %>% filter(TYPE=="Core") %>% arrange(Grid.ID),aes(x=LON, y=LAT, color=Grid.ID), colour="black")+
geom_point(data = EBSdata %>% filter(TYPE=="Core"), aes(x=LON, y=LAT, key=Grid.ID, fill=Sta_Pri), color="black",size=4, shape=21)+
# scale_fill_manual(values=c("blue","red"))+
geom_text(data=EBSdata %>% filter(TYPE=="Core"),aes(x=LON, y=LAT, label=Grid.ID), size=4, colour="black",
fontface="bold",nudge_x=-0.09, nudge_y=-0.09)+
scale_x_continuous(name="Longitude",expand = c(0,0))+
scale_y_continuous(name="Latitude",expand = c(0,0))+
theme_bw()+
theme(
plot.title=element_text(size=20, color="black"),
axis.text.x=element_text(size=20, color = "black"),
axis.text.y = element_text(size=20, color = "black"),
axis.title.y = element_text(size=20, color = "black"),
axis.title.x = element_text(size=20, color = "black"),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_line(color="gray85"),
panel.grid.minor = element_line(color="gray85"),
legend.background = element_rect(fill='transparent'),
# legend.box.background = element_rect(fill='transparent'),
legend.position = c(0.1,0.2),
# legend.position = "right",
legend.title = element_text(size=20, color="black"),
legend.text = element_text(size=18, color="black"))+
ggtitle("DY24-07 EcoFOCI Spring Ichthyoplankton Survey")
ggplotly(p) %>%
layout(dragmode = "lasso")
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (!is.null(d)) d
})
output$brush <- renderPrint({
d <- event_data("plotly_selected")
if (!is.null(d)) d
})
observeEvent(input$copy, {
write_clip(brushedPoints(EBSdata, input$plotly_selected), object_type = "table")
})
}
shinyApp(ui, server)
results<-read.table(text = read_clip(), header = TRUE, sep = "\t", fill=TRUE)
results
